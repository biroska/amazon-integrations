openapi: 3.0.3
info:
  title: Swagger AWS Integration - OpenAPI 3.0
  description: |-
    adadadasasasdasdasaad
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/aws-integration
tags:
  - name: Person
    description: Everything about Person's in our application
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: File
    description: File management using Amazon's S3
    externalDocs:
      description: File management using Amazon's S3
      url: http://swagger.io
paths:
  /person:
    get:
      tags:
        - Person
      summary: Finds all persons in application
      description: Finds all persons in application
      operationId: listPerson
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '400':
          description: Invalid status value
      security:
        - aws-integrations-auth:
            - write:pets
            - read:pets
    post:
      tags:
        - Person
      summary: Add a new Person to the application.
      description: Add a new Person to the application.
      operationId: savePerson
      requestBody:
        description: Add a new Person to the application.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '201':
          description: Person Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - aws-integrations-auth:
            - write:pets
            - read:pets
    put:
      tags:
        - Person
      summary: Update an existing Person by Id
      description: Update an existing Person by Id
      operationId: updatePerson
      requestBody:
        description: Update an existent Person in the application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
      security:
        - aws-integrations-auth:
            - write:pets
            - read:pets
  /person/{personId}:
    delete:
      tags:
        - Person
      summary: Deletes a Person
      description: delete a Person from application
      operationId: deletePerson
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: personId
          in: path
          description: Person's id to delete
          required: true
          schema:
            type: string
            format: '67049d12135c515836fc4062'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid pet value
      security:
        - aws-integrations-auth:
            - write:pets
            - read:pets
  /person/{personId}/contact:
    post:
      tags:
        - Person
      summary: Add a contact to a existing Person
      description: Add a contact to a existing Person
      operationId: updatePersonContact
      parameters:
        - name: personId
          in: path
          description: ID of person to add a contact
          required: true
          schema:
            type: string
            format: '67049d12'
      requestBody:
        description: Add a new Person to the application.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      responses:
        '201':
          description: Contact added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - aws-integrations-auth:
            - write:pets
            - read:pets
  /file:
    get:
      tags:
        - File
      summary: Returns all file's in Bucket
      description: Returns all file's in Bucket
      operationId: listFiles
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 'folde-name/filename.ext'
      security:
        - api_key: []
    post:
      tags:
        - File
      summary: Upload a file to a S3 Bucket
      description: Upload a file to a S3 Bucket
      operationId: fileUpload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: O arquivo a ser enviado.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 'folde-name/filename.ext'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /file/download:
    post:
      tags:
        - File
      summary: Download's a file from S3 Bucket
      description: Download's a file from S3 Bucket
      operationId: fileDownload
      requestBody:
        description: Download's a file from S3 Bucket
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDownload'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 'folde-name/filename.ext'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /file/delete:
    post:
      tags:
        - File
      summary: Remove's a file from S3 Bucket
      description: Remove's a file from S3 Bucket
      operationId: fileDelete
      requestBody:
        description: Download's a file from S3 Bucket
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDelete'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid pet value
      security:
        - aws-integrations-auth:
            - write:pets
            - read:pets



components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Contact:
      type: object
      properties:
        name:
          type: string
          description: Contact's name
          example: 'Joe Doe'
        phone:
          type: string
          description: Contact's phone
          example: 'Joe Doe'
    FileDownload:
      required:
        - path
        - filename
      type: object
      properties:
        path:
          type: string
          description: Local folder to download a file
          example: './some/local/folder'
        filename:
          type: string
          description: Files name
          example: 'filename.ext'
    FileDelete:
      required:
        - filename
      type: object
      properties:
        filename:
          type: string
          description: Files name
          example: 'filename.ext'
    Person:
      required:
        - name
        - age
        - birthdate
        - gender
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          description: Person's name
          example: 'Joe Doe'
        category:
          $ref: '#/components/schemas/Category'
        age:
          type: integer
          description: Person's age
          example: 31
        birthdate:
          type: string
          description: Person's
          example: '1985/06/29'
        gender:
          type: string
          description: Person's gender
          enum:
            - male
            - female
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Person'
        application/xml:
          schema:
            $ref: '#/components/schemas/Person'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    aws-integrations-auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header